import { useState } from "react";
import { Header } from "@/components/Header";
import { Footer } from "@/components/Footer";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { useCartStore } from "@/lib/cartStore";
import { ArrowLeft, Smartphone, Phone, MapPin, User, Shield, CheckCircle, Tag, Receipt } from "lucide-react";
import { Link, useNavigate, useLocation } from "react-router-dom";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/contexts/AuthContext";
import { supabase } from "@/integrations/supabase/client";

const Payment = () => {
  const { items, getTotalPrice, getTotalItems, clearCart } = useCartStore();
  const { user } = useAuth();
  const location = useLocation();
  const appliedPromo = location.state?.appliedPromo || null;
  const [selectedMethod, setSelectedMethod] = useState("");
  const [phoneNumber, setPhoneNumber] = useState("");
  const [transactionId, setTransactionId] = useState("");
  const [shippingAddress, setShippingAddress] = useState({
    fullName: "",
    phone: "",
    address: "",
    city: "",
    area: "",
    postalCode: ""
  });
  const navigate = useNavigate();
  const { toast } = useToast();

  const paymentMethods = [
    {
      id: "bkash",
      name: "bKash",
      icon: Smartphone,
      description: "Pay with bKash mobile banking",
      color: "text-pink-600",
      bgColor: "bg-gradient-to-br from-pink-50 to-pink-100",
      borderColor: "border-pink-200",
      hoverColor: "hover:from-pink-100 hover:to-pink-200"
    },
    {
      id: "rocket",
      name: "Rocket",
      icon: Phone,
      description: "Pay with Rocket mobile banking",
      color: "text-purple-600",
      bgColor: "bg-gradient-to-br from-purple-50 to-purple-100",
      borderColor: "border-purple-200",
      hoverColor: "hover:from-purple-100 hover:to-purple-200"
    }
  ];

  // Calculate totals - moved to separate functions for consistency
  const calculateSubtotal = () => getTotalPrice();
  const calculateDeliveryCharge = () => {
    const subtotal = calculateSubtotal();
    return subtotal > 1000 ? 0 : 60;
  };
  const calculateTax = () => {
    const subtotal = calculateSubtotal();
    return subtotal * 0.08; // 8% tax
  };
  const calculateDiscount = () => {
    if (!appliedPromo) return 0;
    
    const subtotal = calculateSubtotal();
    if (appliedPromo.discount_type === 'percentage') {
      return subtotal * (appliedPromo.discount_value / 100);
    } else {
      return Math.min(appliedPromo.discount_value, subtotal);
    }
  };
  const calculateFinalTotal = () => {
    const subtotal = calculateSubtotal();
    const deliveryCharge = calculateDeliveryCharge();
    const tax = calculateTax();
    const discount = calculateDiscount();
    return subtotal + deliveryCharge + tax - discount;
  };

  const handleSubmit = async () => {
    if (!selectedMethod) {
      toast({
        title: "Please select a payment method",
        variant: "destructive"
      });
      return;
    }

    if (!user) {
      toast({
        title: "Please login to complete your order",
        variant: "destructive"
      });
      navigate("/auth");
      return;
    }

    if (!shippingAddress.fullName || !shippingAddress.phone || !shippingAddress.address || !shippingAddress.city) {
      toast({
        title: "Please fill in all shipping address fields",
        variant: "destructive"
      });
      return;
    }

    if (!phoneNumber) {
      toast({
        title: "Please enter your phone number for mobile banking",
        variant: "destructive"
      });
      return;
    }

    if (!transactionId.trim()) {
      toast({
        title: "Please enter the transaction ID",
        variant: "destructive"
      });
      return;
    }

    toast({
      title: "Processing payment...",
      description: "Please wait while we process your order.",
    });

    try {
      // Calculate totals using the same functions
      const subtotal = calculateSubtotal();
      const deliveryCharge = calculateDeliveryCharge();
      const tax = calculateTax();
      const discount = calculateDiscount();
      const totalAmount = calculateFinalTotal();

      // Create the order with transaction details
      const { data: orderData, error: orderError } = await supabase
        .from('orders')
        .insert({
          user_id: user.id,
          order_number: '', // Will be auto-generated by trigger
          total_amount: totalAmount,
          currency: 'BDT',
          status: 'pending',
          payment_method: paymentMethods.find(m => m.id === selectedMethod)?.name || selectedMethod,
          shipping_address: shippingAddress,
          notes: `Payment Phone: ${phoneNumber}, Transaction ID: ${transactionId}`,
          promo_code: appliedPromo?.code || null,
          discount_amount: discount
        })
        .select()
        .single();

      if (orderError) {
        console.error('Order creation error:', orderError);
        throw new Error('Failed to create order');
      }

      // Create order items
      const orderItems = items.map(item => ({
        order_id: orderData.id,
        book_id: item.book.id,
        book_title: item.book.title,
        book_author: item.book.author,
        book_image: item.book.image,
        price: item.book.price,
        quantity: item.quantity
      }));

      const { error: itemsError } = await supabase
        .from('order_items')
        .insert(orderItems);

      if (itemsError) {
        console.error('Order items creation error:', itemsError);
        throw new Error('Failed to create order items');
      }

      // Update promo code usage if applied
      if (appliedPromo) {
        await supabase
          .from('promo_codes')
          .update({ used_count: appliedPromo.used_count + 1 })
          .eq('id', appliedPromo.id);
      }

      // Clear cart and redirect
      clearCart();
      toast({
        title: "Order placed successfully! ðŸ“š",
        description: `Order #${orderData.order_number} has been created. We will verify your payment and process your order.`,
      });
      navigate("/orders");

    } catch (error) {
      console.error('Payment processing error:', error);
      toast({
        title: "Order failed",
        description: "There was an error processing your order. Please try again.",
        variant: "destructive"
      });
    }
  };

  if (getTotalItems() === 0) {
    return (
      <div className="min-h-screen bg-background">
        <Header />
        <div className="container mx-auto px-4 py-12">
          <div className="text-center">
            <h2 className="text-2xl font-bold mb-4">No items to checkout</h2>
            <Button asChild variant="hero">
              <Link to="/books">Continue Shopping</Link>
            </Button>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background/95 to-primary/5">
      <Header />
      
      <div className="container mx-auto px-4 py-8">
        {/* Header Section */}
        <div className="flex items-center gap-4 mb-8">
          <Button variant="ghost" size="icon" asChild className="rounded-full">
            <Link to="/cart">
              <ArrowLeft className="h-5 w-5" />
            </Link>
          </Button>
          <div className="flex-1">
            <h1 className="text-4xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">
              Secure Checkout
            </h1>
            <p className="text-muted-foreground mt-1 flex items-center gap-2">
              <Shield className="h-4 w-4 text-emerald-500" />
              Complete your order securely
            </p>
          </div>
          <Badge variant="secondary" className="hidden sm:flex">
            {getTotalItems()} {getTotalItems() === 1 ? 'item' : 'items'}
          </Badge>
        </div>

        <div className="grid lg:grid-cols-12 gap-8">
          {/* Left Column - Forms */}
          <div className="lg:col-span-8 space-y-8">
            {/* Shipping Address Card */}
            <Card className="shadow-book border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader className="pb-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-full bg-primary/10">
                    <MapPin className="h-5 w-5 text-primary" />
                  </div>
                  <div>
                    <CardTitle className="text-xl">Delivery Address</CardTitle>
                    <p className="text-sm text-muted-foreground">Where should we deliver your books?</p>
                  </div>
                </div>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="fullName" className="text-sm font-medium flex items-center gap-2">
                      <User className="h-4 w-4" />
                      Full Name *
                    </Label>
                    <Input
                      id="fullName"
                      placeholder="Enter your full name"
                      value={shippingAddress.fullName}
                      onChange={(e) => setShippingAddress({...shippingAddress, fullName: e.target.value})}
                      className="h-12 border-muted-foreground/20 focus:border-primary"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="shippingPhone" className="text-sm font-medium flex items-center gap-2">
                      <Phone className="h-4 w-4" />
                      Phone Number *
                    </Label>
                    <Input
                      id="shippingPhone"
                      placeholder="01xxxxxxxxx"
                      value={shippingAddress.phone}
                      onChange={(e) => setShippingAddress({...shippingAddress, phone: e.target.value})}
                      className="h-12 border-muted-foreground/20 focus:border-primary"
                    />
                  </div>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="shippingAddress" className="text-sm font-medium">Street Address *</Label>
                  <Textarea
                    id="shippingAddress"
                    placeholder="House/Building number, Street name"
                    value={shippingAddress.address}
                    onChange={(e) => setShippingAddress({...shippingAddress, address: e.target.value})}
                    className="min-h-[80px] border-muted-foreground/20 focus:border-primary resize-none"
                    rows={2}
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="city" className="text-sm font-medium">City *</Label>
                    <Input
                      id="city"
                      placeholder="e.g., Dhaka"
                      value={shippingAddress.city}
                      onChange={(e) => setShippingAddress({...shippingAddress, city: e.target.value})}
                      className="h-12 border-muted-foreground/20 focus:border-primary"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="area" className="text-sm font-medium">Area/District</Label>
                    <Input
                      id="area"
                      placeholder="e.g., Dhanmondi"
                      value={shippingAddress.area}
                      onChange={(e) => setShippingAddress({...shippingAddress, area: e.target.value})}
                      className="h-12 border-muted-foreground/20 focus:border-primary"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="postalCode" className="text-sm font-medium">Postal Code</Label>
                    <Input
                      id="postalCode"
                      placeholder="e.g., 1205"
                      value={shippingAddress.postalCode}
                      onChange={(e) => setShippingAddress({...shippingAddress, postalCode: e.target.value})}
                      className="h-12 border-muted-foreground/20 focus:border-primary"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Payment Methods Card */}
            <Card className="shadow-book border-0 bg-card/50 backdrop-blur-sm">
              <CardHeader className="pb-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-full bg-accent/10">
                    <Receipt className="h-5 w-5 text-accent" />
                  </div>
                  <div>
                    <CardTitle className="text-xl">Payment Method</CardTitle>
                    <p className="text-sm text-muted-foreground">Choose your mobile banking option</p>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <RadioGroup value={selectedMethod} onValueChange={setSelectedMethod}>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {paymentMethods.map((method) => {
                      const Icon = method.icon;
                      const isSelected = selectedMethod === method.id;
                      return (
                        <div key={method.id} className="relative">
                          <RadioGroupItem 
                            value={method.id} 
                            id={method.id}
                            className="peer sr-only"
                          />
                          <Label
                            htmlFor={method.id}
                            className={`flex items-center space-x-4 p-6 rounded-xl border-2 cursor-pointer transition-all duration-200 ${method.bgColor} ${method.borderColor} ${method.hoverColor} peer-checked:border-primary peer-checked:shadow-lg peer-checked:scale-[1.02] ${isSelected ? 'ring-2 ring-primary/20' : ''}`}
                          >
                            <div className={`p-3 rounded-full ${isSelected ? 'bg-primary/10' : 'bg-white/60'}`}>
                              <Icon className={`h-6 w-6 ${isSelected ? 'text-primary' : method.color}`} />
                            </div>
                            <div className="flex-1">
                              <div className="font-semibold text-base">{method.name}</div>
                              <div className="text-sm text-muted-foreground mt-1">
                                {method.description}
                              </div>
                            </div>
                            {isSelected && (
                              <CheckCircle className="h-5 w-5 text-primary" />
                            )}
                          </Label>
                        </div>
                      );
                    })}
                  </div>
                </RadioGroup>

                {/* Payment Details for selected method */}
                {selectedMethod && (
                  <div className="mt-8 p-6 bg-gradient-to-r from-primary/5 to-accent/5 rounded-xl border border-primary/10">
                    <div className="space-y-4">
                      <h4 className="font-semibold text-lg mb-4">Payment Details</h4>
                      
                      <div className="space-y-2">
                        <Label htmlFor="paymentPhone" className="text-sm font-medium flex items-center gap-2">
                          <Phone className="h-4 w-4" />
                          Mobile Banking Phone Number *
                        </Label>
                        <Input
                          id="paymentPhone"
                          placeholder="01xxxxxxxxx"
                          value={phoneNumber}
                          onChange={(e) => setPhoneNumber(e.target.value)}
                          className="h-12 border-primary/20 focus:border-primary"
                        />
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="transactionId" className="text-sm font-medium flex items-center gap-2">
                          <Receipt className="h-4 w-4" />
                          Transaction ID *
                        </Label>
                        <Input
                          id="transactionId"
                          placeholder="Enter transaction ID from your payment"
                          value={transactionId}
                          onChange={(e) => setTransactionId(e.target.value)}
                          className="h-12 border-primary/20 focus:border-primary"
                        />
                        <p className="text-xs text-muted-foreground">
                          Enter the transaction ID you received after making the payment
                        </p>
                      </div>

                      <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                        <h5 className="font-medium text-blue-900 mb-2">Payment Instructions:</h5>
                        <ol className="text-sm text-blue-800 space-y-1 list-decimal list-inside">
                          <li>Send payment to our {selectedMethod === 'bkash' ? 'bKash' : 'Rocket'} number</li>
                          <li>Note down the transaction ID from the confirmation SMS</li>
                          <li>Enter the transaction ID in the field above</li>
                          <li>Complete your order</li>
                        </ol>
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Right Column - Order Summary */}
          <div className="lg:col-span-4">
            <Card className="shadow-book sticky top-4 border-0 bg-gradient-to-br from-card via-card/95 to-primary/5 backdrop-blur-sm">
              <CardHeader className="pb-4">
                <CardTitle className="text-xl flex items-center gap-2">
                  <div className="p-2 rounded-full bg-accent/10">
                    <CheckCircle className="h-5 w-5 text-accent" />
                  </div>
                  Order Summary
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Applied Promo Code Display */}
                {appliedPromo && (
                  <div className="p-4 bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-lg">
                    <div className="flex items-center gap-2">
                      <Tag className="h-4 w-4 text-green-600" />
                      <span className="text-sm font-medium text-green-800">
                        Promo Code Applied: {appliedPromo.code}
                      </span>
                    </div>
                    <p className="text-xs text-green-600 mt-1">
                      {appliedPromo.discount_type === 'percentage' 
                        ? `${appliedPromo.discount_value}% discount` 
                        : `à§³${appliedPromo.discount_value} off`}
                    </p>
                  </div>
                )}

                <div className="space-y-4">
                  <div className="flex justify-between items-center py-2">
                    <span className="text-muted-foreground">Subtotal ({getTotalItems()} items)</span>
                    <span className="font-medium">à§³{calculateSubtotal().toFixed(2)}</span>
                  </div>
                  
                  <div className="flex justify-between items-center py-2">
                    <span className="text-muted-foreground">Delivery Charge</span>
                    <span className={calculateDeliveryCharge() === 0 ? "text-emerald-600 font-medium" : "font-medium"}>
                      {calculateDeliveryCharge() === 0 ? "Free" : `à§³${calculateDeliveryCharge().toFixed(2)}`}
                    </span>
                  </div>
                  
                  <div className="flex justify-between items-center py-2">
                    <span className="text-muted-foreground">Tax (8%)</span>
                    <span className="font-medium">à§³{calculateTax().toFixed(2)}</span>
                  </div>

                  {appliedPromo && (
                    <div className="flex justify-between items-center py-2">
                      <span className="text-green-600">Discount ({appliedPromo.discount_type === 'percentage' ? `${appliedPromo.discount_value}%` : `à§³${appliedPromo.discount_value}`})</span>
                      <span className="font-medium text-green-600">-à§³{calculateDiscount().toFixed(2)}</span>
                    </div>
                  )}
                  
                  <div className="border-t pt-4">
                    <div className="flex justify-between items-center">
                      <span className="text-lg font-semibold">Total</span>
                      <span className="text-2xl font-bold text-primary">à§³{calculateFinalTotal().toFixed(2)}</span>
                    </div>
                  </div>
                </div>

                <Button 
                  className="w-full h-14 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200" 
                  size="lg" 
                  variant="hero"
                  onClick={handleSubmit}
                  disabled={!selectedMethod || !phoneNumber || !transactionId.trim()}
                >
                  <CheckCircle className="mr-2 h-5 w-5" />
                  Complete Order
                </Button>

                <div className="flex items-center justify-center gap-2 text-xs text-muted-foreground">
                  <Shield className="h-3 w-3" />
                  <span>Payment verification required</span>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
      
      <Footer />
    </div>
  );
};

export default Payment;
